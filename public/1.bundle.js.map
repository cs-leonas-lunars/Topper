
{"version":3,"sources":["webpack:///./client/Signup.js"],"names":["Checkbox","props","Signup","username","setUsername","useState","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","status","setStatus","validatePassword","setValidatePassword","checked","setChecked","useEffect","handleSubmit","e","preventDefault","info","signupStatus","signup","console","log","target","value"],"mappings":"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","file":"./public/1.bundle.js","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport {signup} from './userActions'\n\nconst Checkbox = props => <input type=\"checkbox\" {...props} />\n\n// local signup\nconst Signup = () => {\n  const [username, setUsername] = useState('')\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [confirmPassword, setConfirmPassword] = useState('')\n  const [status, setStatus] = useState(true)\n  const [validatePassword, setValidatePassword] = useState(true)\n  const [checked, setChecked] = useState(false)\n\n  useEffect(\n    () => {\n      if (confirmPassword === password) {\n        setValidatePassword(false)\n      } else {\n        setValidatePassword(true)\n      }\n    },\n    [password, confirmPassword]\n  )\n\n  const handleSubmit = async e => {\n    e.preventDefault()\n    const info = {\n      username,\n      email,\n      password\n    }\n    const signupStatus = await signup(info)\n    if (signupStatus === 1) {\n      setStatus(false)\n    }\n  }\n\n  console.log(validatePassword, checked, 'both should be true')\n\n  return (\n    <div className=\"signup-component\">\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label htmlFor=\"username\">\n            <small>Username</small>\n          </label>\n          <input\n            onChange={e => setUsername(e.target.value)}\n            name=\"username\"\n            type=\"text\"\n          />\n        </div>\n        <div>\n          <label htmlFor=\"email\">\n            <small>Email</small>\n          </label>\n          <input\n            onChange={e => setEmail(e.target.value)}\n            name=\"email\"\n            type=\"text\"\n          />\n        </div>\n        <div>\n          <label htmlFor=\"password\">\n            <small>Password</small>\n          </label>\n          <input\n            onChange={e => setPassword(e.target.value)}\n            name=\"password\"\n            type=\"password\"\n          />\n        </div>\n        <div>\n          <label htmlFor=\"confirmPassword\">\n            <small>Confirm Password</small>\n          </label>\n          <input\n            onChange={e => setConfirmPassword(e.target.value)}\n            name=\"confirmPassword\"\n            type=\"password\"\n          />\n        </div>\n        <button\n          className=\"signup-button\"\n          type=\"submit\"\n          value=\"submit\"\n          disabled={validatePassword || !checked}\n        >\n          Sign up\n        </button>\n      </form>\n      <label>\n        <Checkbox checked={checked} onChange={() => setChecked(!checked)} />\n        <small>\n          By checking this box, I agree to Topper's terms and conditions\n        </small>\n      </label>\n      <div>\n        {validatePassword && <div>Passwords must match</div>}\n        {!status && <div>Signup Failed</div>}\n      </div>\n    </div>\n  )\n}\n\nexport default Signup\n"],"sourceRoot":""}

