{"version":3,"sources":["webpack:///./client/Transaction.js","webpack:///./client/fortmaticTransaction.js","webpack:///./client/loadData.js","webpack:///./client/metaMaskTransaction.js","webpack:///util (ignored)?a431","webpack:///util (ignored)?8e43"],"names":["Transaction","props","amount","setAmount","useState","cancelStatus","setCancelStatus","data","setData","transferData","loading","useEffect","setTimeout","loadBlockchainData","recipient","then","x","handleSubmit","e","preventDefault","info","account","address","walletType","metaMaskTransaction","fortmaticTransaction","createTransaction","recipientId","id","senderId","user","linkToPost","link","window","close","cancelTransaction","pointerEvents","fontFamily","username","target","value","fm","Fortmatic","web3","Web3","getProvider","recipientAddress","senderAddress","sendValue","utils","toWei","txnParams","from","to","eth","sendTransaction","error","txnHash","console","log","recipientUsername","ethereum","enable","axios","get","location","replace","selectedAddress","alert","currentProvider","getAccounts","metamaskTransaction","sender","transactionParameters","nonce","parseInt","toString","request","method","params","txHash"],"mappings":"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","file":"./public/1.bundle.js","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport fortmaticTransaction from './fortmaticTransaction'\nimport metaMaskTransaction from './metaMaskTransaction'\nimport {loadBlockchainData} from './loadData'\nimport {createTransaction} from './userActions'\n\n// transaction component\nconst Transaction = props => {\n  const [amount, setAmount] = useState(0)\n  const [cancelStatus, setCancelStatus] = useState(0)\n  const [data, setData] = useState({transferData: null, loading: true})\n\n  useEffect(() => {\n    setTimeout(() => {\n      loadBlockchainData(props.recipient).then(x => {\n        setData({transferData: x, loading: false})\n      })\n    }, 2000)\n  }, [])\n\n  const handleSubmit = async e => {\n    e.preventDefault()\n    const info = {\n      account: data.transferData.account,\n      recipient: data.transferData.recipient.address,\n      amount\n    }\n    if (data.transferData.walletType === 'Metamask') {\n      await metaMaskTransaction(info.recipient, info.amount, info.account)\n    } else {\n      await fortmaticTransaction(info.recipient, info.amount, info.account)\n    }\n    await createTransaction({\n      recipientId: data.transferData.recipient.id,\n      senderId: props.user.id,\n      amount,\n      linkToPost: props.link\n    })\n    window.close()\n  }\n\n  const cancelTransaction = () => {\n    setCancelStatus(1)\n  }\n\n  return (\n    // 5 USD = 0.0085 Ethereum, add exchange rate div\n    //divs for recipient and sender just used in the background\n    data.loading ? (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <video\n            src=\"/images/background.mp4\"\n            id=\"background\"\n            playsInline\n            muted\n            autoPlay\n            loop\n            style={{pointerEvents: 'none'}}\n          />\n          <div id=\"overlay\" />\n          <div id=\"loadContainer\">\n            <video\n              src=\"/images/loader.mp4\"\n              id=\"loadIcon\"\n              playsInline\n              muted\n              autoPlay\n              loop\n              style={{pointerEvents: 'none'}}\n            />\n            <img id=\"loadJar\" src=\"/images/loadJar.png\" />\n          </div>\n        </header>\n      </div>\n    ) : cancelStatus ? (\n      <div>{window.close()}</div>\n    ) : (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img\n            id=\"background\"\n            src=\"/images/topperBackground.gif\"\n            alt=\"background gradient\"\n          />\n          <div id=\"overlay\" />\n          <form onSubmit={handleSubmit}>\n            <div>\n              <label id=\"setAmountLabel\" htmlFor=\"ethAmount\">\n                <span style={{fontFamily: 'Montserrat-Thin'}}>\n                  Send Ether To{'\\n'}\n                </span>\n                {data.transferData.recipient.username}\n              </label>\n              <input\n                id=\"setAmountInput\"\n                onChange={e => setAmount(e.target.value)}\n                type=\"float\"\n                name=\"amount\"\n                autoComplete=\"off\"\n                value={amount}\n                required\n              />\n            </div>\n            <div className=\"submit-transaction\">\n              <button\n                className=\"submit-amount\"\n                id=\"submitTransaction\"\n                type=\"submit\"\n                value=\"submit\"\n              >\n                Submit\n              </button>\n            </div>\n          </form>\n          <div className=\"cancel-transaction\">\n            <button\n              type=\"button\"\n              id=\"cancelTransaction\"\n              className=\"submit-amount\"\n              onClick={cancelTransaction}\n            >\n              Close\n            </button>\n          </div>\n        </header>\n      </div>\n    )\n  )\n}\n\nexport default Transaction\n","// Initialize provider\nimport Fortmatic from 'fortmatic'\nimport Web3 from 'web3'\n\n// test network for transactions\nconst fm = new Fortmatic('pk_test_E28EBDED6FA415DC', 'ropsten')\n\n// web3 is for communicating with extensions\nlet web3 = new Web3(fm.getProvider())\n\nexport default async function fortmaticTransaction(\n  // necessary variables for transaction\n  recipientAddress,\n  amount,\n  senderAddress\n) {\n  const sendValue = web3.utils.toWei(amount, 'ether') // Convert 1 ether to wei\n\n  // Get user account wallet address first\n\n  // Construct Ether transaction params\n  const txnParams = {\n    from: senderAddress,\n    to: recipientAddress,\n    value: sendValue\n  }\n\n  // Send Ether transaction with web3\n  await web3.eth.sendTransaction(txnParams, (error, txnHash) => {\n    if (error) throw error\n    console.log(txnHash)\n  })\n}\n","import Web3 from 'web3'\nimport Fortmatic from 'fortmatic'\nimport axios from 'axios'\n\nlet fm = new Fortmatic('pk_test_E28EBDED6FA415DC', 'ropsten')\n\n// beginning transaction logic\nexport const loadBlockchainData = async recipientUsername => {\n  if (window.ethereum) {\n    console.log('New Metamask')\n    window.web3 = new Web3(window.ethereum)\n    await window.ethereum.enable()\n    let recipient = null\n    if (recipientUsername)\n      recipient = await axios.get(\n        `http://localhost:5000/api/users/${recipientUsername}`\n      )\n    if (!recipient && recipientUsername) {\n      window.location.replace(\n        `https://www.reddit.com/message/compose?to=${recipientUsername}&subject=Topper%20-%20Receive%20Your%20Tip&message=Hey%20${recipientUsername},%20I%20liked%20your%20post.%20Download%20the%20Topper%20Chrome%20Extension%20to%20receive%20your%20tip%20in%20ETH.%20Link%20to%20download:%20https://topper-fsa.herokuapp.com`\n      )\n    } else if (!recipient) {\n      return {\n        account: ethereum.selectedAddress,\n        walletType: 'Metamask'\n      }\n    } else if (recipient && recipientUsername) {\n      return {\n        account: ethereum.selectedAddress,\n        recipient: recipient.data,\n        walletType: 'Metamask'\n      }\n    }\n  } else if (window.web3) {\n    console.log('Old Metamask!')\n    alert('Please Update Your Metamask!')\n    /*\n    window.web3 = new Web3(window.web3.currentProvider)\n    let recipient = await axios.get(\n      `http://localhost:5000/api/users/${recipientUsername}`\n    )\n    return {\n      account: web3.eth.accounts[0],\n      recipient: recipient.data.address,\n    }\n    */\n  } else {\n    console.log('Fortmatic')\n    window.web3 = new Web3(fm.getProvider())\n    await web3.currentProvider.enable()\n    let account = await web3.eth.getAccounts()\n    let recipient = null\n    if (recipientUsername)\n      recipient = await axios.get(\n        `http://localhost:5000/api/users/${recipientUsername}`\n      )\n    if (!recipient && recipientUsername) {\n      window.location.replace(\n        `https://www.reddit.com/message/compose?to=${recipientUsername}&subject=Topper%20-%20Receive%20Your%20Tip&message=Hey%20${recipientUsername},%20I%20liked%20your%20post.%20Download%20the%20Topper%20Chrome%20Extension%20to%20receive%20your%20tip%20in%20ETH.%20Link%20to%20download:%20https://topper-fsa.herokuapp.com`\n      )\n    } else if (!recipient) {\n      return {\n        account: account[0],\n        walletType: 'Fortmatic'\n      }\n    } else if (recipient && recipientUsername) {\n      return {\n        account: account[0],\n        recipient: recipient.data,\n        walletType: 'Fortmatic'\n      }\n    }\n  }\n\n  /* else if (data && data.ethereum !== 'undefined') {\n    console.log('New Metamask (Extension)')\n    // New Metamask (Extension)\n    let recipient = await axios.get(\n      `http://localhost:5000/api/users/${data.recipient}`\n    )\n    if (data.recipient && recipient.data) {\n      return {\n        account: data.account,\n        recipient: recipient.data.address,\n      }\n    } else if (data.recipient)\n      window.open(\n        `https://www.reddit.com/message/compose?to=${data.recipient}&subject=Topper%20-%20Receive%20Your%20Tip&message=Hey%20${data.recipient},%20I%20liked%20your%20post.%20Download%20the%20Topper%20Chrome%20Extension%20to%20receive%20your%20tip%20in%20ETH.%20Link%20to%20download:%20https://topper-fsa.herokuapp.com`\n      )\n    else\n      return {\n        account: data.account,\n      }\n  } else if (window.web3 || (data && data.web3 !== 'undefined')) {\n    // Old Metamask (Both)\n    console.log('Please update your Metamask!')\n    return {}\n  } else if (data) {\n    console.log('Fortmatic (Extension)')\n    // No Metamask - Fortmatic (Extension)\n    window.web3 = new Web3(fm.getProvider())\n    let account = {}\n    let recipient = {}\n    await window.web3.eth.getAccounts(async (error, accounts) => {\n      if (error) throw error\n      account = accounts[0]\n    })\n    await window.web3.eth.getBalance(account, async (error, balance) => {\n      if (error) throw error\n      console.log(balance)\n    })\n    recipient = await axios.get(\n      `http://localhost:5000/api/users/${data.recipient}`\n    )\n    if (data.recipient && recipient.data) {\n      return {\n        account: account,\n        recipient: recipient.data.address,\n      }\n    } else if (data.recipient)\n      window.open(\n        `https://www.reddit.com/message/compose?to=${data.recipient}&subject=Topper%20-%20Receive%20Your%20Tip&message=Hey%20${data.recipient},%20I%20liked%20your%20post.%20Download%20the%20Topper%20Chrome%20Extension%20to%20receive%20your%20tip%20in%20ETH.%20Link%20to%20download:%20https://topper-fsa.herokuapp.com`\n      )\n    else\n      return {\n        account: account,\n      }\n  }*/\n}\n","const ethereum = window.ethereum\n\n// actual transaction logic once it has been established that the addresses and amounts are valid\nexport default async function metamaskTransaction(recipient, amount, sender) {\n  console.log(window.ethereum)\n  const transactionParameters = {\n    nonce: '0x00', // ignored by MetaMask\n    to: recipient, // Required except during contract publications.\n    from: sender, // must match user's active address.\n    value: parseInt(web3.utils.toWei(amount, 'ether')).toString(16) // Only required to send ether to the recipient from the initiating external account.\n  }\n\n  // txHash is a hex string\n  // As with any RPC call, it may throw an error\n  await ethereum\n    .request({\n      method: 'eth_sendTransaction',\n      params: [transactionParameters]\n    })\n    .then(txHash => console.log(txHash))\n}\n","/* (ignored) */","/* (ignored) */"],"sourceRoot":""}